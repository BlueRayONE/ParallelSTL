#pragma once

#include <type_traits>
#include <memory>

namespace std {
namespace experimental {
namespace parallel {
inline namespace v1 {

// parallel.execpol.synop
// **********************************************

// 2.3, execution policy type trait
template<class T> struct is_execution_policy;
template<class T> constexpr bool is_execution_policy_v = is_execution_policy<T>::value;

// 2.4, sequential execution policy
class sequential_execution_policy;

// 2.5, parallel execution policy
class parallel_execution_policy;

// 2.6, vector execution policy
class parallel_vector_execution_policy;

// 2.7, dynamic execution policy
class execution_policy;

// 2.9, standard execution policy objects
//extern const sequential_execution_policy seq;
//extern const parallel_execution_policy par;
//extern const parallel_vector_execution_policy vec;

// parallel.execpol.type
// **********************************************

namespace _detail {
template<typename T, typename U>
constexpr bool is_decayed_base_of_v = is_base_of<T, typename decay<U>::type>::value;

template<class T, class U> struct __enable_if_parallel_alg_helper
  : public enable_if<_detail::is_decayed_base_of_v<sequential_execution_policy, T> ||
                     _detail::is_decayed_base_of_v<parallel_execution_policy, T> ||
                     _detail::is_decayed_base_of_v<parallel_vector_execution_policy,T> ||
                     _detail::is_decayed_base_of_v<execution_policy,T>,
                     U> { };

template<class T, class U> struct __enable_if_execution_policy_helper
  : public enable_if<_detail::is_decayed_base_of_v<execution_policy,T>, U> { };

template<class T, class U> struct __enable_if_sequential_policy_helper
  : public enable_if<_detail::is_decayed_base_of_v<sequential_execution_policy, T>, U> { };

template<class T, class U> struct __enable_if_parallel_policy_helper
  : public enable_if<_detail::is_decayed_base_of_v<parallel_execution_policy, T>, U> { };

template<class T, class U> struct __enable_if_vector_policy_helper
  : public enable_if<_detail::is_decayed_base_of_v<parallel_vector_execution_policy,T>, U> { };

} // namespace _detail

template<class T> struct is_execution_policy
  : public integral_constant<bool, _detail::is_decayed_base_of_v<sequential_execution_policy, T> ||
                                   _detail::is_decayed_base_of_v<parallel_execution_policy, T> ||
                                   _detail::is_decayed_base_of_v<parallel_vector_execution_policy,T> ||
                                   _detail::is_decayed_base_of_v<execution_policy,T> > { };


// parallel.execpol.dynamic
// **********************************************

#ifdef _WIN32
# define __NOEXCEPT
#else
# define __NOEXCEPT noexcept
#endif

class execution_policy{
  shared_ptr<void> _instance;
  const type_info *_type;
public:
  // 2.7.1, construct/assign
  template<class ExecutionPolicy>
  execution_policy(const ExecutionPolicy& policy,
                   typename enable_if<is_execution_policy_v<ExecutionPolicy>,
                                                          ExecutionPolicy>::type* = nullptr)
  {
    _instance = std::make_shared<ExecutionPolicy>(policy);
    _type = &typeid(ExecutionPolicy);
  }

  template<class ExecutionPolicy>
  typename std::enable_if<is_execution_policy_v<ExecutionPolicy>, execution_policy>::type&
  operator=(const ExecutionPolicy & policy) 
  {
    _instance = std::make_shared<ExecutionPolicy>(policy);
    _type = &typeid(policy);
    return *this;
  }

  // 2.7.2, object access
  const type_info& type() const __NOEXCEPT 
  {
    return *_type;
  }

  template<class ExecutionPolicy> ExecutionPolicy* get() __NOEXCEPT
  {
    if (*_type != typeid(ExecutionPolicy)) return nullptr; 
    return static_cast<ExecutionPolicy*>(_instance.get());
  }

  template<class ExecutionPolicy> const ExecutionPolicy* get() const __NOEXCEPT
  {
    if (*_type != typeid(ExecutionPolicy)) return nullptr;
    return static_cast<ExecutionPolicy*>(_instance.get()); 
  }

  template<class RandomAccessIterator>
    void sort(RandomAccessIterator first, RandomAccessIterator last) const;

  template<class RandomAccessIterator, class Compare>
    void sort(RandomAccessIterator first, RandomAccessIterator last, Compare comp) const;
};

#undef __NOEXCEPT

}
} // namespace v1
} // namespace experimental
} // namespace std

#include <experimental/bits/parallel/policy_sequential.h>
#include <experimental/bits/parallel/policy_parallel.h>
#ifdef _bleeding_edge
# include <experimental/bits/parallel/policy_dynamic.h>
#endif
